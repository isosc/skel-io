<%
import common

def emit_mpi_function(event, indent=4):
    rvlist = []
    rvlist.append(' '*indent + "// emitting mpi function: {}".format(event['function']))

    return '\n'.join (rvlist)

def emit_posix_function(event, indent=4, filter=[]):
    rvlist = []
    rvlist.append(' '*indent + "// emitting posix function: {0}".format(event['function']))

    if event['function'] == 'fopen64':
        if not event['path'] in filter:
          rvlist.append (' '*indent + 'FILE* {} = fopen64("{}", "{}");'.format(common.to_fp_name(event['path']), common.to_fp_name(event['path']), event['mode']))
          rvlist.append (' '*indent + 'if ({} == 0){{'.format(common.to_fp_name(event['path'])))
          rvlist.append (' '*indent + '    fprintf(stderr, "Unable to open input file {}. Aborting.");'.format(event['path']))
          rvlist.append (' '*indent + '    exit(1);')
          rvlist.append (' '*indent + '}')
          rvlist.append (' '*indent + 'int {} = fileno ({});'.format(common.to_fp_name(event['path'], prefix='fd'), common.to_fp_name(event['path']) ) )
    elif event['function'] == 'fopen':
        if not event['path'] in filter:
          rvlist.append (' '*indent + 'FILE* {} = fopen("{}", "{}");'.format(common.to_fp_name(event['path']), common.to_fp_name(event['path']), event['mode']))
          rvlist.append (' '*indent + 'if ({} == 0){{'.format(common.to_fp_name(event['path'])))
          rvlist.append (' '*indent + '    fprintf(stderr, "Unable to open input file {}. Aborting.");'.format(event['path']))
          rvlist.append (' '*indent + '    exit(1);')
          rvlist.append (' '*indent + '}')
          rvlist.append (' '*indent + 'int {} = fileno ({});'.format(common.to_fp_name(event['path'], prefix='fd'), common.to_fp_name(event['path']) ) )
    elif event['function'] == 'fread':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'fread ({})'.format(common.to_fp_name(event['pathname']) ) )
    elif event['function'] == 'fwrite':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'fwrite (write_buf, {}, 1, {});'.format(event['return'], common.to_fp_name(event['pathname']) ) )
    elif event['function'] == 'fclose':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + '//fclose ({});'.format(common.to_fp_name(event['pathname']) ) )
    elif event['function'] == 'open':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'int {} = open("{}", {}, {});'.format(common.to_fp_name(event['pathname'], prefix='fd'), event['pathname'], event['flags'], event['mode']))
          rvlist.append (' '*indent + 'if ({} == 0){{'.format(common.to_fp_name(event['pathname'], prefix='fd')))
          rvlist.append (' '*indent + '    fprintf(stderr, "Unable to open input file {}. Aborting.");'.format(event['pathname']))
          rvlist.append (' '*indent + '    exit(1);')
          rvlist.append (' '*indent + '}')
    elif event['function'] == 'lseek':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'rv = lseek({}, {}, {});'.format(common.to_fp_name(event['pathname'], prefix='fd'), event['offset'], event['whence']))
    elif event['function'] == 'read':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'rv = read({}, read_buf, {});'.format(common.to_fp_name(event['pathname'], prefix='fd'), event['return']))
    elif event['function'] == 'write':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'rv = write({}, write_buf, {});'.format(common.to_fp_name(event['pathname'], prefix='fd'), event['return']))
    elif event['function'] == 'writev': # Replace writev with write for now
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'rv = write({}, write_buf, {});'.format(common.to_fp_name(event['pathname'], prefix='fd'), event['return']))
    elif event['function'] == 'close':
        if not event['pathname'] in filter:
          rvlist.append (' '*indent + 'close ({});'.format(common.to_fp_name(event['pathname'], prefix='fd') ) )
    else:
        raise NotImplementedError('-{}-'.format(event['function']))

    return '\n'.join (rvlist)


def emit_skel_function(event, indent=4):

    if event['function'] == 'compute':
        return " "*indent + "std::this_thread::sleep_for(std::chrono::milliseconds({}) );".format(int(event['duration']/1000)) #convert micros to millis.


def emit_function(event, filter=[]):
    if event['type'] == 'MPI':
        return emit_mpi_function(event)
    elif event['type'] == 'POSIX':
        return emit_posix_function(event, filter=filter)
    elif event['type'] == 'SKEL':
        return emit_skel_function(event)
    else:
        raise NotImplementedError('-{}-'.format(event['type']))

%>

\#include <iostream>
\#include "mpi.h"
\#include <sys/types.h>
\#include <sys/stat.h>
\#include <fcntl.h>
\#include <unistd.h>
\#include <chrono>
\#include <thread>

void do_rank_<%='{0:05d}'.format(int(self.arg['rank']))%> (){

    int rv;
    const int read_buf_size = 128 * 1024 * 1024;
    const int write_buf_size = 128 * 1024 * 1024;
    char* write_buf = (char*)(malloc (write_buf_size) );
    char* read_buf = (char*)(malloc (read_buf_size) );

    std::cout << "Hello from rank " << $self.arg['rank'] << std::endl;

<%
filter = self.models['tweak']['filter']
%>

#for $event in $self.models['posix-model']['events'][int($self.arg['rank'])]
<%=emit_function(event, filter=filter)%>
#end for

}
